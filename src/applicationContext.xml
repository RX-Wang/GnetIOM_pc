<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
	http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
    
	<context:annotation-config />
	<!-- 把标记了@Controller注解的类转换为bean -->
	<context:component-scan base-package="com.gnet" />
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
		
	<!-- 下面设置了从后台调用前台JSP时，只能在WEB-INF下JSP文件夹下寻找 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 最大上传限制 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="104857600" />
		<property name="maxInMemorySize" value="4096" />
	</bean>
	
	<!-- 配置连接数据库 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
   		<property name="jdbcUrl" value="jdbc:mysql://192.168.4.52:3306/gnet_iot_malarm"></property>
   		<property name="user" value="root"></property>
   		<property name="password" value="123456"></property>
   		
    	<property name="minPoolSize" value="10" />
    	<property name="maxPoolSize" value="100" />
    	<property name="maxIdleTime" value="60" />
    	<property name="acquireIncrement" value="2" />
    	<property name="maxStatements" value="0" />
    	<property name="initialPoolSize" value="10" />
    	<property name="idleConnectionTestPeriod" value="60" />
    	<property name="testConnectionOnCheckin" value="true" />
    	<property name="testConnectionOnCheckout" value="true" />
    	<property name="acquireRetryAttempts" value="30" />
    	<property name="acquireRetryDelay" value="100" />
    	<property name="breakAfterAcquireFailure" value="true" />
	</bean>
	
	<!-- JDBC模板 -->  
    <bean id="jdbcTemplate"  
        class="org.springframework.jdbc.core.JdbcTemplate">  
        <property name="dataSource" ref="dataSource" />  
    </bean>



	<!-- 配置连接数据库1 -->
	<bean id="dataSource1" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
   		<property name="jdbcUrl" value="jdbc:mysql://114.112.90.46:7733/gnet_iot_sys"></property>
   		<property name="user" value="root"></property>
   		<property name="password" value="admin@123"></property>
    	<property name="minPoolSize" value="10" />
    	<property name="maxPoolSize" value="100" />
    	<property name="maxIdleTime" value="60" />
    	<property name="acquireIncrement" value="2" />
    	<property name="maxStatements" value="0" />
    	<property name="initialPoolSize" value="10" />
    	<property name="idleConnectionTestPeriod" value="60" />
    	<property name="testConnectionOnCheckin" value="true" />
    	<property name="testConnectionOnCheckout" value="true" />
    	<property name="acquireRetryAttempts" value="30" />
    	<property name="acquireRetryDelay" value="100" />
    	<property name="breakAfterAcquireFailure" value="true" />
	</bean>
	
	<!-- JDBC模板1 -->  
    <bean id="jdbcTemplate1"  
        class="org.springframework.jdbc.core.JdbcTemplate">  
        <property name="dataSource" ref="dataSource1" />  
    </bean>

	<bean id="txManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>

	<!-- 用注解来实现事务管理 -->
	<tx:annotation-driven transaction-manager="txManager" />
	
	<!-- 添加springAOP切面支持 -->
	<aop:aspectj-autoproxy/>  
    
    
    
    
    
    
    
    
    
    
    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->  
<!-- WXQ	<bean id="myRealm" class="com.MyRealm"/>   -->
	   
	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->  
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
<!-- WXQ	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
	    <property name="realm" ref="myRealm"/>  
	</bean>  --> 
	   
	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
<!-- 	WXQ<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">   -->
	    <!-- Shiro的核心安全接口,这个属性是必须的 -->  
<!-- WXQ	    <property name="securityManager" ref="securityManager"/>  --> 
	    <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->  
	<!--   WXQ  <property name="loginUrl" value="/"/>   -->
	    <!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->  
	    <!-- <property name="successUrl" value="/system/main"/> -->  
	    <!-- 用户访问未对其授权的资源时,所显示的连接 -->  
	    <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->  
<!-- WXQ	    <property name="unauthorizedUrl" value="/"/>   -->
	    <!-- Shiro连接约束配置,即过滤链的定义 -->  
	    <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->  
	    <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
	    <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
	    <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
<!-- WXQ	    <property name="filterChainDefinitions">  
	        <value>  
	             /mydemo/login=anon  
	             /mydemo/getVerifyCodeImage=anon  
	             /main**=authc  
	             /user/info**=authc  
	             /admin/listUser**=authc,perms[admin:manage]  
	        </value>  
	    </property>
	</bean>   -->
	   
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
	<!--WXQ <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>   -->
	   
	<!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->  
	<!-- 配置以下两个bean即可实现此功能 -->  
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->  
	<!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->  
	<!--   
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
	  <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
	    <property name="securityManager" ref="securityManager"/>  
	  </bean>  
	-->
	    
    
    
    
    
    
    
    
    
    
    
    
    
    
</beans>